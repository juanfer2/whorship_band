// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: src/wompi/infrastructure/grpc/proto/wompi_service.proto

package wompipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WompiService_CreateTransacction_FullMethodName      = "/wompi.WompiService/CreateTransacction"
	WompiService_GetTransactionById_FullMethodName      = "/wompi.WompiService/GetTransactionById"
	WompiService_CreateCreditCardProduct_FullMethodName = "/wompi.WompiService/CreateCreditCardProduct"
)

// WompiServiceClient is the client API for WompiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WompiServiceClient interface {
	CreateTransacction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionMessage, error)
	GetTransactionById(ctx context.Context, in *GetTransactionParams, opts ...grpc.CallOption) (*TransactionMessage, error)
	CreateCreditCardProduct(ctx context.Context, in *CreditCardParams, opts ...grpc.CallOption) (*CreditCardProductMessage, error)
}

type wompiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWompiServiceClient(cc grpc.ClientConnInterface) WompiServiceClient {
	return &wompiServiceClient{cc}
}

func (c *wompiServiceClient) CreateTransacction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionMessage, error) {
	out := new(TransactionMessage)
	err := c.cc.Invoke(ctx, WompiService_CreateTransacction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompiServiceClient) GetTransactionById(ctx context.Context, in *GetTransactionParams, opts ...grpc.CallOption) (*TransactionMessage, error) {
	out := new(TransactionMessage)
	err := c.cc.Invoke(ctx, WompiService_GetTransactionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompiServiceClient) CreateCreditCardProduct(ctx context.Context, in *CreditCardParams, opts ...grpc.CallOption) (*CreditCardProductMessage, error) {
	out := new(CreditCardProductMessage)
	err := c.cc.Invoke(ctx, WompiService_CreateCreditCardProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WompiServiceServer is the server API for WompiService service.
// All implementations must embed UnimplementedWompiServiceServer
// for forward compatibility
type WompiServiceServer interface {
	CreateTransacction(context.Context, *TransactionRequest) (*TransactionMessage, error)
	GetTransactionById(context.Context, *GetTransactionParams) (*TransactionMessage, error)
	CreateCreditCardProduct(context.Context, *CreditCardParams) (*CreditCardProductMessage, error)
	mustEmbedUnimplementedWompiServiceServer()
}

// UnimplementedWompiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWompiServiceServer struct {
}

func (UnimplementedWompiServiceServer) CreateTransacction(context.Context, *TransactionRequest) (*TransactionMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransacction not implemented")
}
func (UnimplementedWompiServiceServer) GetTransactionById(context.Context, *GetTransactionParams) (*TransactionMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionById not implemented")
}
func (UnimplementedWompiServiceServer) CreateCreditCardProduct(context.Context, *CreditCardParams) (*CreditCardProductMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCreditCardProduct not implemented")
}
func (UnimplementedWompiServiceServer) mustEmbedUnimplementedWompiServiceServer() {}

// UnsafeWompiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WompiServiceServer will
// result in compilation errors.
type UnsafeWompiServiceServer interface {
	mustEmbedUnimplementedWompiServiceServer()
}

func RegisterWompiServiceServer(s grpc.ServiceRegistrar, srv WompiServiceServer) {
	s.RegisterService(&WompiService_ServiceDesc, srv)
}

func _WompiService_CreateTransacction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompiServiceServer).CreateTransacction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WompiService_CreateTransacction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompiServiceServer).CreateTransacction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WompiService_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompiServiceServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WompiService_GetTransactionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompiServiceServer).GetTransactionById(ctx, req.(*GetTransactionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WompiService_CreateCreditCardProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditCardParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompiServiceServer).CreateCreditCardProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WompiService_CreateCreditCardProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompiServiceServer).CreateCreditCardProduct(ctx, req.(*CreditCardParams))
	}
	return interceptor(ctx, in, info, handler)
}

// WompiService_ServiceDesc is the grpc.ServiceDesc for WompiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WompiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wompi.WompiService",
	HandlerType: (*WompiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransacction",
			Handler:    _WompiService_CreateTransacction_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _WompiService_GetTransactionById_Handler,
		},
		{
			MethodName: "CreateCreditCardProduct",
			Handler:    _WompiService_CreateCreditCardProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/wompi/infrastructure/grpc/proto/wompi_service.proto",
}
